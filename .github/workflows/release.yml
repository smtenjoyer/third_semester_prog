name: 'C++ CI'

# Запускаем workflow при пуше в ветки lab1 или feature/github_actions
on: 
  # событие запускаем
  push:
    branches:
      - laba2
      - feature/github_actions

jobs:
  build_ubuntu:
   runs-on: ubuntu-latest
    permissions: write-all
    steps:
      # Шаг для проверки кода
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      
      # Устанавливаем необходимые зависимости
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libgtest-dev
          # Установка библиотек Google Test
          cd /usr/src/googletest
          sudo cmake .
          sudo make install

      # Создаем директорию для сборки
      - name: Create build directory
        run: mkdir build

      # Переходим в директорию сборки и запускаем CMake
      - name: Run CMake
        run: |
          cd build
          cmake .. -DPATCH_VERSION=${{ github.run_number }}

      # Сборка проекта
      - name: Build project
        run: |
          cd build
          cmake --build .

      # Запуск тестов
      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure

      - name: Create Package
        run: cmake --build . --target package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build_macos:
    # Запускаем job на macos-latest
    runs-on: macos-latest
    # Предоставляем разрешения на запись во все ресурсы
    permissions: write-all
    steps:
      # Клонируем репозиторий, включая submodules
      - uses: actions/checkout@v3
        with:
          submodules: true
      # Устанавливаем boost с помощью Homebrew
      - run: brew install boost
      # Конфигурируем проект с помощью CMake, используя номер запуска для PATCH_VERSION
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      # Строим проект с помощью CMake
      - run: cmake --build .
      # Запускаем тесты
      - name: Run Tests
        run: |
          ctest --output-on-failure || exit 1  # Проверяем наличие тестов и их успешное выполнение
      
      # Создаем пакет
      - run: cmake --build . --target package
      # Создаем релиз для MacOS
      - name: Create Release (MacOS)
        id: create_release_macos
        # Используем action для создания релиза
        uses: actions/create-release@v1
        # Используем GITHUB_TOKEN для аутентификации
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Устанавливаем tag_name, release_name и другие параметры
        with:
          tag_name: ${{ github.run_number }} # Используем номер запуска для тега
          release_name: Release ${{ github.run_number }} (MacOS)
          draft: false # Не публикуем релиз в черновике
          prerelease: false # Не публикуем как предварительную версию
      # Загружаем релизный ассет для MacOS
      - name: Upload Release Asset (MacOS)
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_macos.outputs.upload_url }}
          asset_path: ./ip_check-0.0.${{ github.run_number }}-Darwin.zip
          asset_name: ip_check-0.0.${{ github.run_number }}-Darwin.zip
          asset_content_type: application/zip